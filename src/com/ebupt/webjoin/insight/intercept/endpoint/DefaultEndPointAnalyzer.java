/**
 * Copyright (c) 2009-2011 VMware, Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.ebupt.webjoin.insight.intercept.endpoint;

import java.util.Collections;
import java.util.List;

import com.ebupt.webjoin.insight.intercept.operation.Operation;
import com.ebupt.webjoin.insight.intercept.operation.OperationType;
import com.ebupt.webjoin.insight.intercept.trace.Frame;
import com.ebupt.webjoin.insight.intercept.trace.FrameUtil;
import com.ebupt.webjoin.insight.intercept.trace.Trace;
import com.ebupt.webjoin.insight.util.StringUtil;
 

/**
 * {@link EndPointAnalyzer} that matches all traces with a minimal score
 * (so as to ensure that other analyzers may &quot;trump&quot; it)
 * This will guarantee that all traces will be categorized into an endpoint
 */
public class DefaultEndPointAnalyzer implements EndPointAnalyzer {
    /**
     * The default {@link EndPointName} generated by this analyzer
     */
    public static final EndPointName    DEFAULT_ENDPOINT=EndPointName.valueOf("default");

    /**
     * Default label assigned to the {@link EndPointAnalysis} generated by this analyzer
     */
    public static final String DEFAULT_LABEL="Default";

    /**
     * Fixed score assigned to all endpoints generated by this analyzer.
     * <B>Note:</B> we return a score of {@link EndPointAnalysis#DEFAULT_LAYER_SCORE}
     * so as to let other endpoints &quot;beat&quot; this one
     */
    public static final int	DEFAULT_SCORE=EndPointAnalysis.DEFAULT_LAYER_SCORE;

    private static final DefaultEndPointAnalyzer	INSTANCE=new DefaultEndPointAnalyzer();

    private DefaultEndPointAnalyzer () {
    	super();
    }

    public static final DefaultEndPointAnalyzer getInstance () {
    	return INSTANCE;
    }

    public Frame getScoringFrame(Trace trace) {
    	// does not really matter since the score is fixed
		return trace.getRootFrame();
	}

	public EndPointAnalysis locateEndPoint(Trace trace) {
        String label = trace.getLabel();
        return makeEndPoint(label);
    }

    public EndPointAnalysis locateEndPoint(Frame frame, int depth) {
    	Frame		root=FrameUtil.getRoot(frame);
    	Operation	op=(root == null) ? null : root.getOperation();
    	if (op == null) {
    		return null;
    	} else {
    		return makeEndPoint(op.getLabel());
    	}
    }

    public int getScore(Frame frame, int depth) {
        return DEFAULT_SCORE;
    }

    public List<OperationType> getOperationTypes() {
        return Collections.emptyList();
    }

    private EndPointAnalysis makeEndPoint(String label) {
        return new EndPointAnalysis(DEFAULT_ENDPOINT, DEFAULT_LABEL, StringUtil.isEmpty(label) ? DEFAULT_LABEL : label, DEFAULT_SCORE);
    }
}
